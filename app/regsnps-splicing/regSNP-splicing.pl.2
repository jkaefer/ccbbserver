#!/usr/bin/perl
use warnings;
$|++;
   
use CGI qw(:cgi-lib :standard);  # Use CGI modules that let people read data passed from a form
use CGI::Carp 'fatalsToBrowser';

use File::Basename;
use URI;

unless(-e "query_jobs" or mkdir "query_jobs", 0775) {
				die "<p>Unable to create \"query_jobs\"</p>";
	}
unless(-e "temp" or mkdir "temp", 0775) {
				die "<p>Unable to create \"temp\"</p>";
	}

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
my $ts = "$year-$mon-$mday-$hour-$min-$sec";
mkdir "./query_jobs/job_$ts",0775 if !-e "./query_jobs/job_$ts";

my $job_url = "./query_jobs/job_$ts/result.html";
my $usr_access_result_url = "http://watson.compbio.iupui.edu/regSNP-splicing/query_jobs/job_$ts/result.html";


my $wait_notice = "Your data has been successfully uploaded. </br> Please wait upto several minutes to finish prediction (About 2 seconds per SNV). </br></br> Or save the following <a href= \"$usr_access_result_url\" > link </a> and retrieve your result later.";

open(OUT, ">$job_url")||die "$!";
print OUT "
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n
<html xmlns=\"http://www.w3.org/1999/xhtml\">\n
<head>\n
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n
</head>\n
<script  type=\"text/javascript\">
function timeReload(timeoutPeriod){
    setTimeout(\"location.reload(true);\",timeoutPeriod);
}
</script>
<body bgcolor=\"white\" onload = \"JavaScript:timeReload(2000);\" >\n
<h3>$wait_notice<h3>\n
<p><h3><a href = \"$usr_access_result_url\">$usr_access_result_url</a></h3><p>
</body>\n
</html>\n
";
close OUT;



#my $q = CGI->new;
#print $q->redirect("$usr_access_result_url");

#print "Location: $usr_access_result_url\n\n";
print "Content-type: text/html\n\n";
print "<head><META HTTP-EQUIV=\"refresh\" content=\"0;URL=$usr_access_result_url\" /></head>\n";
#print "<h3>Your data has been successfully uploaded.</br> Please wait on this page. </br> Or save the <a href= \"$usr_access_result_url\" > link </a> and retrieve your result later.<h3>";

print "<body bgcolor=\"white\">
<h3>$wait_notice<h3>\n
<p><h3><a href = \"$usr_access_result_url\">$usr_access_result_url</a></h3><p>
</body>";

$old_fh = select(OUTPUT_HANDLE);
$| = 1;
select($old_fh);


$cgi_lib'writefiles = 1;
&ReadParse(%in);                 # This grabs the data passed by the form and puts it in an array

my $real_result = "./query_jobs/job_$ts/result";
open(RE, ">$real_result")||die "$!";
print RE "
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n
<html xmlns=\"http://www.w3.org/1999/xhtml\">\n
<head>\n
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n
</head>\n
<script  type=\"text/javascript\">
function timeReload(timeoutPeriod){
        setTimeout(\"location.reload(true);\",timeoutPeriod);
}
</script>
<body bgcolor=\"white\" >\n
<style>
table, th, td {
    border: 1px solid black;
    border-collapse: collapse;
}
th, td {
    padding: 5px;
}
th {
    text-align: center;
}
td{
    text-align: left;
}
td#probable{
   background-color: #ff99b3; 
}
td#possible{
    background-color: #d0e3f0;
}
table#splicingSite {
    width: 100%;    
}
table#exonBody {
    width: 100%;
}
</style>
";

#print  RE "<body>";

$data_textbox = $in{"data_textbox"};             # Get the info from the textbox and assign to variable
my $usrdata = $data_textbox;
$usrdata =~ s/\r\n/;/g;
my @showdata = split(/;/, $usrdata);
my $shd = "";
my $shlimit = 9;
if($#showdata > $shlimit ){
    $shd = join('<br>', @showdata[0..$shlimit]);
    #print RE "<p>Your input data:</p><br>$shd<br>......";
}else{
    $shd = join('<br>', @showdata);
    #print RE "<p>Your input data:</p><br>$shd";
}
my $uploaded_fl = '';
my $input_desp = '';

if($data_textbox eq '') ## query is uploaded
{
	my $query = new CGI;
	my $safe_filename_characters = "a-zA-Z0-9_.-";
	my $filename = $query->param("data_file");
	my $tmpfilename = $query->tmpFileName($filename);

	my ( $name, $path, $extension ) = fileparse ( $filename, '..*' );
	$filename = $name . $extension;
	$filename =~ tr/ /_/;
	$filename =~ s/[^$safe_filename_characters]//g;
	print RE "<p>The uploaded file is \"$filename\"</p>";

	my $upload_filehandle = $query->upload("data_file");
	$uploaded_fl = "./query_jobs/job_$ts/$filename";
	$input_desp = $filename;
	#mkdir "./query_jobs/job_$ts",0775 if !-e "./query_jobs/job_$ts";
	
	open ( UPLOADFILE, ">$uploaded_fl" ) or die "$!";
	binmode UPLOADFILE;
	while ( <$upload_filehandle> ){
		print UPLOADFILE $_;
		#print "<p>$_\n</p>";
	}
	close UPLOADFILE;
	
}
else{ ## query is pasted in text-box
	$uploaded_fl = "./query_jobs/job_$ts/query";
	$input_desp = 'query';
	#mkdir "./query_jobs/job_$ts",0775 if !-e "./query_jobs/job_$ts";

	open(IN, ">$uploaded_fl")||die "$!";
	print IN $data_textbox;
	close IN;
	
}

print RE "<br/>";
#print RE "success 0.     ";

close RE;

system("setsid perl bg_model.pl $uploaded_fl $input_desp $ts $real_result");
