#!/usr/bin/perl
use warnings;
use strict;

my ($uploaded_fl, $input_desp, $ts, $flhand ) = @ARGV;
open(RE, ">>$flhand")||die "$!";

#print RE "perl ./source/prepare_features.pl $uploaded_fl $input_desp ./query_jobs/job_$ts";

system("perl ./source/prepare_features.pl $uploaded_fl $input_desp ./query_jobs/job_$ts");
#print RE "   success.1       $?  ";


##----------------------------------------- output prediction result --------------------------------------------
my $var_c_eb = `wc -l < ./query_jobs/job_$ts/$input_desp.weka.data.inner.info`;
my $var_c_ss = `wc -l < ./query_jobs/job_$ts/$input_desp.weka.data.ss.info`;
chomp($var_c_eb); chomp($var_c_ss);
my $eb_download_link = "#";
my $ss_download_link = "#";

#print RE "</br>$var_c_eb\n$var_c_ss\n";


if($var_c_eb >0){
	$eb_download_link = "http://watson.compbio.iupui.edu/regSNP-splicing/query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.exonBody";
}
if($var_c_ss >0){
    $ss_download_link = "http://watson.compbio.iupui.edu/regSNP-splicing/query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.splicingSite";
}

my $all_download_link = "http://watson.compbio.iupui.edu/regSNP-splicing/query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.combine";
print RE "<div><p><mark><b>Download your prediction result here:</b></mark><p>";
#print RE"<p><a href= $eb_download_link>    #SNVs on exon body:      $var_c_eb</a></p>\n";
#print RE"<p><a href= $ss_download_link>    #SNVs on splicing sites: $var_c_ss</a></p></div><br>\n";
print RE"<p><a href= $all_download_link>Download prediction result</a></p></div><br>\n";





## ------------------------------------------------------ output prediction result for SNV on splicing site -------------------------------------
my %combined_pred = ();
my @snp_order = ();
open(IN,"$uploaded_fl" )||die "$!"; ## 'query' or uploaded file
while(<IN>){
	s/\s+$//;
	my @line = split(/\s+/, $_);
	#$snp{$line[0]}{'type'} = $line[3];
	if ($#line == 2){
		push @snp_order, "$line[0]:$line[1]-$line[2]";
	}elsif($#line > 2 and $line[3] =~ /[ACGT]+/ and $line[4] =~ /[ACGT]+/){
		my @alta = split(/,/, $line[4]);
		foreach my $al (@alta){
			push @snp_order, "chr$line[0]:$line[1]:$line[3]-$al"; 
		}
	}
}
close IN;

my $fl1 = "./query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.splicingSite";
my $fl2 = "./query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.exonBody";
my $fl3 = "./query_jobs/job_$ts/$input_desp.exonic_snp_disease_causing_probabilty.combine";
my $h = '';

if($var_c_ss >0){
    my $status = system ("perl ./source/code_package/disease_causing_prob_separate.pl $input_desp ss $uploaded_fl ./query_jobs/job_$ts");
	open(PD, $fl1)||die "$!";
	$h = <PD>;
	while(<PD>){
		s/\s+$//;
		#my @line = split(/\s+/, $_);
		my @line = split(',', $_);
		$combined_pred{"$line[0]:$line[1]:$line[2]-$line[3]"} = $_;
	}
	close PD;

}

if($var_c_eb >0){
	my $status = system("perl ./source/code_package/disease_causing_prob_separate.pl $input_desp inner $uploaded_fl ./query_jobs/job_$ts");
	open(PD, $fl2)||die "$!";
	$h = <PD>;
	while(<PD>){
		s/\s+$//;
		#my @line = split(/\s+/, $_);
		my @line = split(',', $_);
		if(!/NA/){
		$combined_pred{"$line[0]:$line[1]:$line[2]-$line[3]"} = $_;
		}
	}
	close PD;
}


open(OT, ">$fl3")||die "$!";
print OT "$h\n";
foreach my $so (@snp_order){
	if($combined_pred{$so} ne ''){
		print OT  "$combined_pred{$so}\n";
	}
}

close OT;

	#print RE "<table id=\"splicingSite\"> \n<caption>Predictions for input SNVs on <b><mark>Splicing sites</mark></b></br>Disease causing probability Cut-off:</br><font style=\"background-color:#d0e3f0\">0.44 (Pathogenic Possible: FDR = 0.15, Sensitivity=0.91, Specifity=0.82,MCC=0.73 )</font><br><font style= \"background-color:#ff99b3\"> 0.67 (Pathogenic Probable: FDR = 0.1, Sensitivity=0.82, Specifity=0.89, MCC=0.7)</font></caption>";
print RE "<table class=\"sortable\"> \n<p><b>Predictions for input SNVs </b>(Click on column name to sort)</p>\n";

	open (OUT, $fl3)||die "$!";
	my $h1 = <OUT>;
	$h1 =~ s/\s+$//;
	#my @head = split(/\t|\s+/, $h1);
	my @head = split(",",  $h1);
	print RE "<thead>\n<tr class = \"tableHeader\">\n";
	foreach my $h (0..$#head){
	    print RE "<th>$head[$h]</th>";
	}
	print RE "</tr>\n</thead>\n<tbody>\n";
	my $oddeven = 0;
	while(<OUT>){
	        s/\s+$//;
	        my @line = split(/,/, $_);
		$oddeven +=1;
		if($oddeven %2 ==0){
			print RE "<tr class =\"tableRowEven\">\n";

		}else{
			print RE "<tr class =\"tableRowOdd\">\n";
		}
		foreach my $e(0..$#line){
			print RE "<td>$line[$e]</td>";
		}
		print RE "</tr>\n";
	}
	
	print RE "</tbody>\n</table>\n";
	close OUT;





print RE "<br>";
#print RE "<p>***</p>";
print RE "<br />";
print RE "<hr><tr><p>If you have any problem with the website, please contact:<a href=\"mailto:yunliu\@iupui.edu\" target=\"_top\">Yunlong Liu</a>,or <a href=\"mailto:zhangxin\@umail.iu.edu\" target=\"_top\">Xinjun Zhang</a>.</p></tr>";
print RE "</div></body>";
close RE;

rename("./query_jobs/job_$ts/result.html", "./query_jobs/job_$ts/result.tmp")||die "$!";
rename("./query_jobs/job_$ts/result", "./query_jobs/job_$ts/result.html")||die "$!";







